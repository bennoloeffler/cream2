package bel.util.versioning

import spock.lang.Specification

import javax.script.*

/*
 * This Spock specification was generated by the Gradle 'init' task.
 */
class NashornEnmlJsTest extends Specification {




    def "application executes enml.js in nashorn"() {
        setup:
        //def app = new NashornEnmlJsTest()
        ScriptEngine engine = new ScriptEngineManager().getEngineByName("nashorn")
        Bindings engineScope = engine.getBindings(ScriptContext.ENGINE_SCOPE)
        engineScope.put("window", engineScope)
        //engine.eval("print('Hello World');")
        ClassLoader classLoader = getClass().getClassLoader()
        File fileENML = new File(classLoader.getResource("enml-js-master/enml.js").getFile())
        File filetest = new File(classLoader.getResource("call_test.js").getFile())
        //File fileXMLParse = new File(classLoader.getResource("enml-js-master/lib/xml-parser.js").getFile())
        //File fileXMLWrite = new File(classLoader.getResource("enml-js-master/lib/xml-writer.js").getFile())
        //engine.eval(new FileReader("enml.js"))

        //engine.eval("load( '" + classLoader.getResource("enml-js-master/lib/xml-parser.js") +"');")
        //engine.eval(load(classLoader.getResource("enml-js-master/lib/xml-writer.js").toString()))
        engine.eval(new FileReader(filetest))
        engine.eval(new FileReader(fileENML))

        Invocable invocable = (Invocable) engine

        when:
        //Map<String, Object> result;
        //result = (Map<String, Object>) engine.eval("zxcvbn('" + pw + "');");
        Object result1 = invocable.invokeFunction("testFunction", 'Benno')
        Object result2 = invocable.invokeFunction("testFunction2", 'Benno2')
        //Object result3 = invocable.invokeFunction("call_test.testFunction3", 'Benno3')

        Object result4 = invocable.invokeFunction("window.enml.ENMLOfPlainText", 'Peter Parker')
        //Object result2 = invocable.invokeFunction("enml.PlainTextOfENML", "abc")

        then:
        result1 == "testFunction: greetings from javascript"
        result2 == "testFunction2: greetings from javascript"

    }

}
