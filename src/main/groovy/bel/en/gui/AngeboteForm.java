package bel.en.gui;

import bel.en.evernote.Angebot;
import bel.en.evernote.ENHelper;
import bel.en.localstore.SyncHandler;
import com.evernote.edam.type.Note;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import lombok.Getter;
import org.apache.commons.lang3.Pair;
import org.jdesktop.swingx.JXTable;
import org.jdesktop.swingx.decorator.HighlighterFactory;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import javax.swing.table.AbstractTableModel;
import java.awt.*;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;

/**
 * Created 02.04.2017.
 */
public class AngeboteForm {
    @Getter
    private JPanel panel;
    private JButton aktualisierenButton;
    private JButton nachExcelButton;
    private JXTable angeboteXTable;

    AngeboteTableModel tableModel = new AngeboteTableModel();
    List<Pair<Note, Angebot>> angebotList = new ArrayList<>();

    public AngeboteForm() {
        aktualisierenButton.addActionListener(e -> updateData());
        nachExcelButton.addActionListener(e -> GuiUtil.notYet());
        angeboteXTable.setModel(tableModel);
        angeboteXTable.addHighlighter(HighlighterFactory.createSimpleStriping());
    }

    private void updateData() {
        angebotList = new ArrayList<>();
        List<Note> allNotes = SyncHandler.get().getAllNotes();
        for (Note n : allNotes) {
            ArrayList<Pair<Note, Angebot>> angebote = ENHelper.findAllHot(n);
            angebotList.addAll(angebote);
        }
        tableModel.fireTableDataChanged();
    }

    public void initAfterDataAvailable() {
        //angeboteTable.initAfterDataAvailable();
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel = new JPanel();
        panel.setLayout(new BorderLayout(0, 0));
        panel.setBorder(BorderFactory.createTitledBorder(null, "alle gefundenen Angebote der Form: ANGEBOT BEL: 20.3.2017 EUR 120.000 80%  Ã¼ber Analyse, Soll und xyz...", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 3, new Insets(0, 0, 0, 0), -1, -1));
        panel.add(panel1, BorderLayout.SOUTH);
        aktualisierenButton = new JButton();
        aktualisierenButton.setText("aktualisieren");
        panel1.add(aktualisierenButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        nachExcelButton = new JButton();
        nachExcelButton.setText("nach Excel");
        panel1.add(nachExcelButton, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel1.add(spacer1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        panel.add(scrollPane1, BorderLayout.CENTER);
        angeboteXTable = new JXTable();
        angeboteXTable.setColumnControlVisible(true);
        angeboteXTable.setEditable(false);
        angeboteXTable.putClientProperty("JTable.autoStartsEdit", Boolean.TRUE);
        angeboteXTable.putClientProperty("terminateEditOnFocusLost", Boolean.TRUE);
        scrollPane1.setViewportView(angeboteXTable);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel;
    }

    private class AngeboteTableModel extends AbstractTableModel {

        String[] columns = {"Notiz-Titel", "EUR", "%", "wer", "vom", "gesamter Text"};

        @Override
        public int getColumnCount() {
            return columns.length;
        }

        @Override
        public String getColumnName(int column) {
            return columns[column];
        }

        @Override
        public int getRowCount() {
            return angebotList.size();
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            Pair<Note, Angebot> noteAngebotPair = angebotList.get(rowIndex);
            Note n = noteAngebotPair.left;
            Angebot a = noteAngebotPair.right;
            switch (columnIndex) {
                case 0:
                    return n.getTitle();
                case 1:
                    return (a.euros == -1 ? "---" : a.euros).toString();
                case 2:
                    return (a.probability == -1 ? "50 ?" : a.probability).toString();
                case 3:
                    return a.responsible != null ? a.responsible : "---";
                case 4:
                    return a.date != null ? a.date.format(DateTimeFormatter.ofPattern("dd.MM.yyyy")) : "---";
                case 5:
                    return a.completeString;
            }
            return "ERROR";
        }
    }
}
