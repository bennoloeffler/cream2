package bel.en.gui;

import bel.en.data.AbstractConfiguration;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import javax.swing.*;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;

/**
 * User can choose Tags from the list of tags and set them
 * for MANY Notes at once.
 */
public class TaggerForAllMarked extends JDialog {
    private JRadioButton firmaTagRadioButton;
    private JRadioButton personTagRadioButton;
    private JCheckBox tagOderUnTagCheckBox;
    private JButton tagNowButton;
    private JList tagList;
    private JPanel tagAllPanel;
    private String tagToChange; // null if canceled...
    private boolean isAddTag;
    private boolean isPerson;

    public String getTagToChange() {
        return tagToChange;
    }

    public boolean isAddTag() {
        return isAddTag;
    }

    public boolean isPerson() {
        return isPerson;
    }


    public TaggerForAllMarked() {
        setContentPane(tagAllPanel);
        setModal(true);
        getRootPane().setDefaultButton(tagNowButton);
        tagNowButton.setEnabled(false);
        isPerson = true;

        personTagRadioButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                setListData();
                isPerson = true;
            }
        });
        firmaTagRadioButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                setListData();
                isPerson = false;
            }
        });
        tagNowButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (tagOderUnTagCheckBox.isSelected()) {
                    // ADD Tag
                    isAddTag = true;
                } else {
                    // REMOVE Tag
                    isAddTag = false;
                }
                String selectedString = tagList.getSelectedValue().toString();
                String[] split = selectedString.split("  -  ");
                tagToChange = split[0].trim();
                dispose();
            }
        });

        // call onCancel() when cross is clicked
        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                tagToChange = null; // this is the sign! CANCEL.
                dispose();
            }
        });


        tagList.addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (e.getValueIsAdjusting() == false) {

                    if (tagList.getSelectedIndex() == -1) {
                        //No selection, disable fire button.
                        tagNowButton.setEnabled(false);

                    } else {
                        //Selection, enable the fire button.
                        tagNowButton.setEnabled(true);
                    }
                }
            }
        });

        setListData();

    }

    private void setListData() {
        if (personTagRadioButton.isSelected()) {
            tagList.setListData(AbstractConfiguration.getConfig().getAllPersonTagsAsList().toArray());
        } else if (firmaTagRadioButton.isSelected()) {
            tagList.setListData(AbstractConfiguration.getConfig().getAllFirmaTagsAsList().toArray());
        } else {
            tagList.setListData(new Object[0]);
        }

    }


    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        tagAllPanel = new JPanel();
        tagAllPanel.setLayout(new GridLayoutManager(4, 2, new Insets(5, 5, 5, 5), -1, -1));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        tagAllPanel.add(panel1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        personTagRadioButton = new JRadioButton();
        personTagRadioButton.setSelected(true);
        personTagRadioButton.setText("Person Tag");
        panel1.add(personTagRadioButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        firmaTagRadioButton = new JRadioButton();
        firmaTagRadioButton.setText("Firma Tag");
        panel1.add(firmaTagRadioButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        tagNowButton = new JButton();
        tagNowButton.setText("Tag oder un-Tag durchfÃ¼hren");
        tagAllPanel.add(tagNowButton, new GridConstraints(3, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        tagAllPanel.add(spacer1, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        tagOderUnTagCheckBox = new JCheckBox();
        tagOderUnTagCheckBox.setSelected(true);
        tagOderUnTagCheckBox.setText("Tag oder un-Tag");
        tagOderUnTagCheckBox.setToolTipText("angehakt = Tag setzen, nicht angehakt = Tag entfernen");
        tagAllPanel.add(tagOderUnTagCheckBox, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        tagAllPanel.add(scrollPane1, new GridConstraints(1, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        tagList = new JList();
        tagList.setMinimumSize(new Dimension(100, 200));
        final DefaultListModel defaultListModel1 = new DefaultListModel();
        tagList.setModel(defaultListModel1);
        tagList.setSelectionMode(0);
        scrollPane1.setViewportView(tagList);
        ButtonGroup buttonGroup;
        buttonGroup = new ButtonGroup();
        buttonGroup.add(personTagRadioButton);
        buttonGroup.add(firmaTagRadioButton);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return tagAllPanel;
    }
}
