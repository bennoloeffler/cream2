package bel.en.gui;

import bel.en.data.CreamDataListener;
import bel.en.data.CreamFirmaData;
import bel.en.localstore.SyncHandler;
import bel.util.DiffMatchPatch;
import bel.util.ENMLToPlainText;
import bel.util.Util;
import com.evernote.edam.type.Note;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import com.syncthemall.enml4j.ENMLProcessor;
import javafx.application.Platform;
import lombok.Data;
import lombok.NonNull;
import lombok.extern.log4j.Log4j2;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import javax.xml.stream.XMLStreamException;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

/**
 * This form adds a chooser for Notes and a listener for selections.
 */
@Log4j2
public class EnmlForm {

    private final VersionListModel versionListModel;
    //ENMLProcessor enmlProcessor;
    private JPanel enmlPanel;
    //private JTextPane rawNoteTextPane;
    //private JavaFxWebBrowser rawNoteTextPane;
    private JPanel searchPanel;
    private JavaFxWebBrowser javaFxWebBrowser;
    private JList oldVersionList;
    private JButton backToVersionButton;
    private ArrayList<VersionEntry> versionHistory = new ArrayList<>();
    private CreamFirmaData firmaData = null;

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        enmlPanel = new JPanel();
        enmlPanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        final JSplitPane splitPane1 = new JSplitPane();
        splitPane1.setDividerLocation(300);
        enmlPanel.add(splitPane1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(400, 400), null, 0, false));
        splitPane1.setRightComponent(javaFxWebBrowser);
        final JSplitPane splitPane2 = new JSplitPane();
        splitPane2.setDividerLocation(300);
        splitPane2.setOrientation(0);
        splitPane1.setLeftComponent(splitPane2);
        searchPanel = new JPanel();
        searchPanel.setLayout(new BorderLayout(0, 0));
        splitPane2.setLeftComponent(searchPanel);
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(2, 2, new Insets(0, 0, 0, 0), -1, -1));
        splitPane2.setRightComponent(panel1);
        panel1.setBorder(BorderFactory.createTitledBorder(null, "alte Versionen", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        backToVersionButton = new JButton();
        backToVersionButton.setEnabled(false);
        backToVersionButton.setText("gewählte Version übernehmen");
        panel1.add(backToVersionButton, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel1.add(spacer1, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        panel1.add(scrollPane1, new GridConstraints(0, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        oldVersionList = new JList();
        final DefaultListModel defaultListModel1 = new DefaultListModel();
        oldVersionList.setModel(defaultListModel1);
        scrollPane1.setViewportView(oldVersionList);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return enmlPanel;
    }


    //@RequiredArgsConstructor
    @Data
    private static class VersionEntry {
        @NonNull
        final String user;
        @NonNull
        final String date;
        @NonNull
        final String delta;

        private String versionCache;

        public String getThisOldVersion(String newerVersion) {
            //if (versionCache == null) {
            LinkedList<DiffMatchPatch.Diff> diffs = DiffMatchPatch.get().diff_fromDelta(newerVersion, delta);
            versionCache = DiffMatchPatch.get().diff_text2(diffs);
            //}
            return versionCache;
        }

        public String toString() {
            return user + " " + date + " DELTA: [" + delta + "]";
        }
    }

    private class VersionListModel extends AbstractListModel<VersionEntry> {

        @Override
        public int getSize() {
            return versionHistory.size();
        }

        @Override
        public EnmlForm.VersionEntry getElementAt(int index) {
            return versionHistory.get(index);
        }

        public void fireChanged() {
            fireContentsChanged(this, 0, getSize()); // TODO: this could be a bug...
        }
    }

    public EnmlForm() {

        $$$setupUI$$$();

        backToVersionButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                GuiUtil.notYet();

            }
        });

        versionListModel = new VersionListModel();
        oldVersionList.setModel(versionListModel);
        oldVersionList.getSelectionModel().addListSelectionListener(e -> {
            if (!e.getValueIsAdjusting()) {
                ListSelectionModel source = (ListSelectionModel) e.getSource();
                if (!source.isSelectionEmpty()) {

                    int selected = source.getAnchorSelectionIndex();
                    VersionEntry versionEntry = versionHistory.get(selected);
                    log.info("Selection: " + versionEntry);

                    //
                    // get the old data recovered
                    //
                    String oldContentENML = calcFullVersion(versionEntry);
                    Note oldNote = new Note();
                    // TODO: oldNote.setTitle();
                    oldNote.setContent(oldContentENML);

                    String oldContentHTML = "";
                    String oldContentPlainText = "";

                    String newContentHTML = "";
                    String newContentPlainText = "";

                    String diffAsHTML = "<html><head><title>ERROR</title></head><body>recovering old version FAILED!</body></html>";

                    try {
                        oldContentHTML = ENMLProcessor.get().noteToInlineHTMLString(oldNote);
                        oldContentPlainText = ENMLToPlainText.convert(oldContentHTML);
                        //System.out.println("\n\nOLD TEXT: " + oldContentPlainText);

                        newContentHTML = ENMLProcessor.get().noteToInlineHTMLString(firmaData.getNote());
                        newContentPlainText = ENMLToPlainText.convert(newContentHTML);
                        //System.out.println("\n\nNEW TEXT: " + newContentPlainText);

                        LinkedList<DiffMatchPatch.Diff> diffs = DiffMatchPatch.get().diff_main(oldContentPlainText, newContentPlainText);
                        DiffMatchPatch.get().diff_cleanupSemantic(diffs); // TODO: Check the other versions, too. Maybe better human readalbe (lines???)
                        diffAsHTML = DiffMatchPatch.get().diff_prettyHtml(diffs);

                    } catch (Exception e1) {
                        log.warn(String.format("could not convert ENML to html to text : %s", firmaData.getNote().getContent()));
                    }
                    /*

                     */
                    //if(showDifferenceToNextVersionCheckbox.isSelected()) {

                    //} else {
                    //}
                    String finalDiffAsHtml = diffAsHTML; // to make it final

                    Platform.runLater(() -> javaFxWebBrowser.loadContent(finalDiffAsHtml));

                } else {
                    //show nothing
                }
            }

        });
    }

    private String calcFullVersion(VersionEntry e) {
        // starting at latest, go backwards and apply patch...
        String current = firmaData.getNote().getContent();
        for (VersionEntry entry : versionHistory) {
            String oldOne = entry.getThisOldVersion(current);
            current = oldOne;
            if (entry.equals(e)) return current;
        }
        throw new RuntimeException(String.format("did not find in version history: %s", e));
    }

    public JPanel getPanel() {
        return enmlPanel;
    }

    public void initAfterDataAvailable() {

        //ENMLProcessor enmlProcessor = ENMLProcessor.get();
        /*
        ((WstxOutputFactory) ENMLProcessor.getOutputFactory()).setProperty(
                WstxOutputFactory.P_AUTOMATIC_EMPTY_ELEMENTS, false);
        // Uses Woodstox has a the stAX implementation
        System.setProperty("javax.xml.stream.XMLInputFactory", "com.ctc.wstx.stax.WstxInputFactory");
        System.setProperty("javax.xml.stream.XMLOutputFactory", "com.ctc.wstx.stax.WstxOutputFactory");
        System.setProperty("javax.xml.stream.XMLEventFactory", "com.ctc.wstx.stax.WstxEventFactory");
*/

        NoteChooserForm chooserPanel = new NoteChooserForm();
        searchPanel.add(chooserPanel.getPanel());
        chooserPanel.initAfterDataAvailable();

        SyncHandler.get().addCreamDataListener(new CreamDataListener() {

            @Override
            public void selectionChanged(Object origin, CreamFirmaData n) {
                //log.trace(CRASH_NIT, "ENmlForm start");
                firmaData = n;
                if (firmaData == null) {
                    //log.trace(CRASH_NIT, "firmaData == null");
                    // dont change. Probably lost by sync.
                } else {
                    //suchErgebnisDetailsTextPane.setContentType("text/html");
                    //javaFxWebBrowser.setContentType("text/html");

                    try {
                        //log.trace(CRASH_NIT, "going to show html... " + firmaData);
                        showHtmlInBrowser(firmaData.getNote());
                        //log.trace(CRASH_NIT, "going to showVersionsInList");
                        showVersionsInList(firmaData.getNote());
                        //log.trace(CRASH_NIT, "going to clearSelection in oldVersionList");
                        oldVersionList.getSelectionModel().clearSelection();
                        //log.trace(CRASH_NIT, "got it all done... Now its in the fx-thread");
                    } catch (Exception e) {

                        // try to load ressources...
                        try {
                            //log.trace(CRASH_NIT, "firmaData == null");
                            SyncHandler.get().loadRessources(firmaData.getNote());
                            log.info("loaded ressources for " + firmaData.getNote().getTitle());
                            //log.trace(CRASH_NIT, "firmaData == null");
                            showHtmlInBrowser(firmaData.getNote());
                        } catch (XMLStreamException e1) {
                            //log.trace(CRASH_NIT, "firmaData == null");
                            Platform.runLater(() -> javaFxWebBrowser.loadContent(Util.inHtmlBody("ERROR", "Fehler beim PARSEN der Evernote Notiz")));
                            //e1.printStackTrace();
                        } catch (Exception e2) {
                            //log.trace(CRASH_NIT, "firmaData == null");
                            Platform.runLater(() -> javaFxWebBrowser.loadContent(Util.inHtmlBody("ERROR", "Fehler beim LADEN der Evernote Notiz")));
                            e2.printStackTrace();
                        }
                    }
                    //rawNoteTextPane.setText(n.getNote().getContent().replace(">", ">\n")); // create linfeeds...
                }
                //log.trace(CRASH_NIT, "ENmlForm finished");
            }
        });
    }

    private void showVersionsInList(Note note) {

        versionHistory = new ArrayList<>();
        try {
            List<String> patchList = SyncHandler.get().getPatchList(note);
            for (String patchRaw : patchList) {
                String shortName = patchRaw.substring(0, 4);
                String date = patchRaw.substring(5, 24);
                String delta = patchRaw.substring(25, patchRaw.length());
                versionHistory.add(new VersionEntry(shortName, date, delta));
                /*
                String[] split = patchRaw.split("\\*\\*\\*PATCHDATA\\*\\*\\*");
                List<String> collect = Arrays.stream(split).map(String::trim).collect(Collectors.toList());
                String data = collect.get(0);
                DiffMatchPatch.get().patch_apply(patchList, )
                */

            }
            //System.out.println(versionHistory);
            versionListModel.fireChanged();

        } catch (IOException e) {
            log.error("Could not read version history file: ", e);
        }
    }

    private void showHtmlInBrowser(Note n) throws XMLStreamException {
        //log.trace(CRASH_NIT, "enml to html... " + firmaData);
        ENMLProcessor enmlProcessor = ENMLProcessor.get();
        //log.trace(CRASH_NIT, "got enmlProcessor" + firmaData);
        final String html = enmlProcessor.noteToInlineHTMLString(n);
        //final String html = Util.inHtmlBody("TEST", "EnmlForm:319 JUST FOR THE TEST... removed ENMLProcessor.get().noteToInlineHTMLString(n)");

        System.out.println(html);
        //String text;
        //try {
        //HtmlToText h2t = new HtmlToText();
        //h2t.parse(html);
        //System.out.println(HtmlToText.cleanTagPerservingLineBreaks(html));
        //System.out.println(ENMLToPlainText.convert(html));

        //} catch (Exception e) {
        //    e.printStackTrace();
        //}
        //log.trace(CRASH_NIT, "going to schedule web-browser event ... ");
        Platform.runLater(() -> javaFxWebBrowser.loadContent(html));
    }

    private void createUIComponents() {
        // TODO: place custom component creation code here

        javaFxWebBrowser = new JavaFxWebBrowser();
    }

}
